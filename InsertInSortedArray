extension Array where Element : Comparable {
    func insertionIndex(_ value: Element) -> Index {
        var slice : ArraySlice = self[...]
        while !slice.isEmpty {
            let middle = slice.index(slice.startIndex, offsetBy: slice.count / 2)
            if value < slice[middle] {
                slice = slice[..<middle]
            } else {
                slice = slice[index(after: middle)...]
            }
            
        }
    
        return slice.startIndex
    }

    mutating func sortAndInsertValue(_ value:Element)
    {
      self.sort()
      self.insert(value, at: self.insertionIndex(value)) 

    }
}

var array = [9,0,2,3,5,6,7,8,1]
array.sortAndInsertValue(10)

print(array)

 struct SortedArray<T: Comparable> {
  private var array = [T]()

   init(array: [T]) {
    self.array = array
    self.array.sort()
  }
  var count: Int {
    return array.count
  }
   mutating func insert(_ value: T)  {
     self.array.insert(value, at: self.array.insertionIndex(value)) 

  }
}

extension SortedArray: CustomStringConvertible {
  public var description: String {
    return array.description
  }
}

var sortedArray = SortedArray<Int>(array: [2,6,7,3,1])
sortedArray.insert(4) 
print(sortedArray.count)
