func fib(_ n:Int)-> ([Int],Int?)
{

   var fibArr = [0,1]
     guard n>=1 else {return (fibArr,fibArr.last)}
    (2...n).forEach{ i in 
      fibArr.append(fibArr[i-1] + fibArr[i-2])
    }
  return (fibArr,fibArr.last)
}

print(fib(6).0)

print(fib(3).1 ?? 0)


OutPut

[0, 1, 1, 2, 3, 5, 8]
2

///////////// With Sequence Protocol    ////////////////

struct FibsSequence: Sequence {
     var n: Int
    
    init(_ n: Int) {
        self.n = n
    }
    
    func makeIterator() -> FibsIterator {
        return FibsIterator(n)
    }
} 

struct FibsIterator: IteratorProtocol {
     var tup = (0, 1)
     var n: Int
     var counter = 0
    
    init(_ n: Int) {
        self.n = n
    }
    
    mutating func next() -> Int? {
        guard n > counter else {return nil}
        guard n > 0 else {return nil}
        
        let nxtN = tup.0
        tup = (tup.1, tup.0 + tup.1)
        counter += 1
        print(tup)
        return nxtN
    }
}


for  fib in FibsSequence(11).enumerated() {
    print("fib: \(fib.element)")
}
