extension Character {
 
    var isAlphanumeric:Bool {
         let chars = Set("abcdefghijklmnopqrstuvwxyz ABCDEFGHIJKLKMNOPQRSTUVWXYZ")
         return chars.contains(self)
    }
   
}





/////   Noraml ///////

 let arr = "Ab,c,de!$"
 var word = Array(arr)

  var left = 0
  var right = word.count - 1
       while left<right
 {
       if word[left].isAlphanumeric == false
       {
         left = left + 1
       }
       else if word[right].isAlphanumeric == false
       {
         right = right - 1
       }
       else
       {
         word.swapAt( left, right)
         left = left + 1
         right = right - 1
       }
   }  

 print(String(word))
 
 
 
 /////////// with array extension on character ///////
 
 
 
  

extension Character {
 
    var isAlphanumeric:Bool {
         let chars = Set("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLKMNOPQRSTUVWXYZ")
         return chars.contains(self)
    }
   
}


extension Array where Element == Character {
    mutating func reverse()
    {
      var left = 0
      var right = self.count - 1
       while left<right
      {
       if self[left].isAlphanumeric == false
       {
         left = left + 1
       }
       else if self[right].isAlphanumeric == false
       {
         right = right - 1
       }
       else
       {
         self.swapAt( left, right)
         left = left + 1
         right = right - 1
       }
   } 
    }
}


 let arr = "Ab,c,de!$"
 var word = Array(arr)
print(String(word))
word.reverse()
 print(String(word))
 
 
 
 OUTPUT:
 
 ed,c,bA!$
