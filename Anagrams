extension String {
 
    var removeSpecialCharsFromString:String {
         let chars = Set("abcdefghijklmnopqrstuvwxyz ABCDEFGHIJKLKMNOPQRSTUVWXYZ1234567890")
    return String(self.filter { chars.contains($0) })
}
   
}

///// To generate ///////

extension String {
    
     mutating func swapAt(_ i: Int, _ j: Int)-> String {
        var characters = Array(self)
        characters.swapAt(i, j)
        return String(characters)
    }

     mutating private func anagrams(from index: Int) -> [String] {
        var anagramsArr = [String]()
        for count in index..<self.count {
            let newAnagram = self.swapAt( index, count)
                anagramsArr.append(newAnagram)
      }
        
        return anagramsArr
    }
    

     public func generateAnagrams() -> [String] {
        var finalAnagrams = [self]
        for i in 0..<(self.count-1)
        {
           let currentArr = finalAnagrams
            finalAnagrams.removeAll()
            for var str in currentArr {
                let arr = str.anagrams(from: i)
                finalAnagrams.append(contentsOf: arr)
            }
        }
     
        return finalAnagrams
    }
}

print("ABCD".generateAnagrams(),"ABCD".generateAnagrams().count)



///// To check 2 strings /////////
func checkAnagram(_  fString:String, _ sString: String)-> Bool
{
  return fString.lowercased().sorted() == sString.lowercased().sorted()
}






////// to get count //////
 func getAllAnagramsFor(_ cStr : String, _ arrStr : [String]) -> [String]
{
   var arr = [String]()
    arrStr.forEach{ (str) in
        if checkAnagram(cStr,str)
        {
            arr.append(str)     
         }
      }
     return  arr.filter { $0 != cStr }

}

 func getCount(_ cStr : String, _ arrStr : [String]) -> Int
{
  var count = 0
   arrStr.forEach{ (str) in
        if str == cStr
        {
           count =  count + 1   
         }
      }
      return count
}



func toDisplayAnagramCountWithPhase()
{
  let sentence = "I love POOL game and three main types of loop: for.. next loop, do loop and while loop."

let phase = "pool".lowercased()
let splitStringArray = sentence.removeSpecialCharsFromString.split(separator: " ").map({ (substring) in
    return String(substring).lowercased()
})

    var dict = [String: Int]()
if let arr : [String] = getAllAnagramsFor(phase,splitStringArray), arr.count > 0
  {
      dict[phase] = getCount(phase,splitStringArray)
      for str in arr
      {
              dict[str] = getCount(str,splitStringArray)
      }
   }
     print(dict)

}





////// To display all anagram indexes in array of array //////

func toDispalyMatchIndex()
{
   let sentence = "cat dog god tca cer"
let splitStringArray = sentence.removeSpecialCharsFromString.split(separator: " ").map({ (substring) in
    return String(substring).lowercased()
})
  

var allIndexes = [[String]]()


 for item in splitStringArray
{ 
    var alredyPresent =  false
    for items in allIndexes
    {
      if items.contains(item)
      {
        alredyPresent =  true
      }
    } 

if let arr : [String] = getAllAnagramsFor(item,splitStringArray), arr.count > 0
  {
      var arrCurrent = [String]()
      arrCurrent.append(item)
      arrCurrent.append(contentsOf: arr)
      if alredyPresent == false
      {
      allIndexes.append(arrCurrent)
      }
   }
 }
var output = [[Int]]()
allIndexes.forEach{ items in
            var arrCurrent = [Int]()
             items.forEach{ item in
              arrCurrent.append(splitStringArray.firstIndex(of: item) ?? 0)
                }
                output.append(arrCurrent)

}

 print(output)

}
 


print(checkAnagram("LISTEN","SILENT").description)

toDisplayAnagramCountWithPhase()

toDispalyMatchIndex()

OUTPUT:


["ABCD", "ABDC", "ACBD", "ACDB", "ADCB", "ADBC", "BACD", "BADC", "BCAD", "BCDA", "BDCA", "BDAC", "CBAD", "CBDA", "CABD", "CADB", "CDAB", "CDBA", "DBCA", "DBAC", "DCBA", "DCAB", "DACB", "DABC"] 24
true
["pool": 1, "loop": 4]
[[0, 3], [1, 2]]







